#!/bin/bash
DEPLOY_BRANCH="refactor"
DEPLOY_ROOT="/var/www/Tandem"
UPDATE_CMD='cd "${DEPLOY_TO}" && ./scripts/deployment/update.sh;'
RESTART_CMD='${DEPLOY_TO}/scripts/deployment/stop.sh;${DEPLOY_TO}/scripts/deployment/start.sh'

export GIT_DIR="$(cd $(dirname $(dirname $0));pwd)"
export PROJECT_NAME="${GIT_DIR##*/}"
export DEPLOY_TO="${DEPLOY_ROOT}"
export GIT_WORK_TREE="${DEPLOY_TO}"
IP="$(ip addr show venet0:0 | grep 'inet ' | cut -f2 | awk '{ print $2}')"

echo "+++++++++++++++++++++++ Running on '${HOSTNAME}' (${IP}) ++++++++++++++++++++++++"
echo
mkdir -p "${DEPLOY_TO}"
# Loop, because it is possible to push more than one branch at a time. (git push --all)
while read oldrev newrev refname
do

        branch=$(git rev-parse --symbolic --abbrev-ref $refname)

        if [ "${DEPLOY_BRANCH}" == "$branch" ]; then
                # Make sure GIT_DIR and GIT_WORK_TREE is correctly set and 'export'ed. Otherwhise
                # these two environment variables could also be passed as parameters to the git cli
                echo "githook: Deploying '${DEPLOY_BRANCH}' branch of the '${PROJECT_NAME}' project to '${DEPLOY_TO}'"
                git checkout -f "${DEPLOY_BRANCH}"
                git reset --hard HEAD

                if [ ! -z "${UPDATE_CMD}" ]; then
                        echo
                        echo "githook: UPDATE (CMD: '${UPDATE_CMD}'):"
                        eval $UPDATE_CMD
                fi

                if [ ! -z "${RESTART_CMD}" ]; then
                        echo
                        echo "githook: RESTART (CMD: '${RESTART_CMD}'):"
                        eval $RESTART_CMD
                fi

        else
                echo "githook: I am NOT going to deploy the '${branch}' branch of the '${PROJECT_NAME}' project. Expected branch to deploy is '${DEPLOY_BRANCH}'."
        fi

done

echo
echo "++++++++++++++++++++ See you soon at '${HOSTNAME}' (${IP}) ++++++++++++++++++++++"
exit 0
